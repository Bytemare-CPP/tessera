name: Tessera CI/CD

on:
  push:
    branches: [ main, deploy ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
        env:
          VITE_SUPABASE_URL: "https://example.supabase.co"
          VITE_SUPABASE_KEY: "dummy-key-for-testing"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'
          
      # Frontend build process - runs at the repository root
      - name: Install frontend dependencies
        run: npm ci
          
      - name: Build frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
          
      # Backend build process - runs in the server directory
      - name: Install server dependencies
        run: |
          cd server
          npm ci
          
      - name: Build server
        run: |
          cd server
          npm run build
          
      # Upload artifacts for deployment
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          
      - name: Upload server build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: server/
          
      - name: Upload package files
        uses: actions/upload-artifact@v4
        with:
          name: package-files
          path: |
            package.json
            package-lock.json
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/
          
      - uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server/
          
      - uses: actions/download-artifact@v4
        with:
          name: package-files
          path: ./
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          # List files to verify what we have
          echo "Files to deploy:"
          ls -la
          ls -la server/
          
          # Create directories
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/tessera/server"
          
          # Transfer frontend files
          rsync -avz --delete dist/ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tessera/dist/
          
          # Transfer package files
          rsync -avz package.json package-lock.json ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tessera/
          
          # Transfer server files
          rsync -avz server/ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tessera/server/
          
          # Install dependencies
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/tessera/server && npm ci --production'
          
          # Start server with PM2
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/tessera/server && pm2 delete tessera-api || echo "No previous process to delete"; pm2 start dist/index.js --name tessera-api'
          
          # Save PM2 configuration
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'pm2 save'
          
      - name: Create server environment file
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SUPABASE_URL=${{ secrets.SUPABASE_URL }}' > ~/tessera/server/.env"
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' >> ~/tessera/server/.env"
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'VIBE_MATCHER_URL=${{ secrets.VIBE_MATCHER_URL }}' >> ~/tessera/server/.env"
          
      - name: Set up Vibe Matcher service
        run: |
          # Create vibe_matcher directory
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/tessera/vibe_matcher"
          
          # Transfer vibe_matcher files
          rsync -avz server/src/vibe_matcher/ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tessera/vibe_matcher/
          
          # Install Python dependencies
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd ~/tessera/vibe_matcher && python3 -m pip install -r requirements.txt"
          
          # Create environment file for Vibe Matcher
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SUPABASE_URL=${{ secrets.SUPABASE_URL }}' > ~/tessera/vibe_matcher/.env"
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' >> ~/tessera/vibe_matcher/.env"
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'PORT=8000' >> ~/tessera/vibe_matcher/.env"
          
          # Start the Vibe Matcher with PM2
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd ~/tessera/vibe_matcher && pm2 delete vibe-matcher || echo 'No previous process to delete'; pm2 start 'python3 vibe_matcher.py' --name vibe-matcher"
          
          # Save PM2 configuration
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pm2 save"
          
      - name: Set up Nginx for API routing
        run: |
          # Create the Nginx configuration file with proper formatting
          cat > nginx.conf << 'EOT'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name tessera.it.com localhost;

              # API requests
              location /api/ {
                  proxy_pass http://localhost:4000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }

              # Vibe Matcher API requests
              location /vibe/ {
                  proxy_pass http://localhost:8000/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }

              # Frontend files
              location / {
                  root /home/${{ secrets.EC2_USERNAME }}/tessera/dist;
                  index index.html;
                  try_files $uri $uri/ /index.html;
              }

              # Error pages
              error_page 404 /404.html;
              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
                  root /usr/share/nginx/html;
              }
          }
          EOT
          
          # Transfer and install the Nginx config
          rsync -avz nginx.conf ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tessera.conf
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo mv ~/tessera.conf /etc/nginx/conf.d/tessera.conf && sudo nginx -t && sudo systemctl restart nginx'